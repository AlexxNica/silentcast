#!/bin/bash

v=2.0
show_version() {
	echo Silentcast v$v
}

show_help() {
cat << EOF
Silentcast creates a silent, uncompressed video, 
silentcast/temp.mkv, and your choice of compressed video in
the silentcast directory: anim.gif, anim.webm, and/or anim.mp4.
Frame by frame png images are created in order to make anim.gif,
and can be the final output if desired so that no anim file
will be produced. The webm and mp4 anim files can be made from
the png images if desired which allows for frame by frame
editing.

Usage: silentcast [-h -v]

    -h          display this help and exit
    -v		display version and exit

Silentcast runs 2 other bash scripts that are part of the 
same package: genffcom and temptoanim.
Look at those help outputs for more information. Even better,
view /usr/share/doc/silentcast/README.md with a markdown
viewer and get an animated gif demo made with Silentcast, as
well as a step by step guide and a list of tips.
EOF
}

OPTIND=1
while getopts ":hv" opt
do 
	case $opt in
		h)
			show_help
			exit 0
			;;
		v)
			show_version
			exit 0
			;;
       	esac
done
shift "$((OPTIND-1))" # get rid of everything just processed leaving anything else as $1 $2 etc.

unset fps area_choice area ffcoms_running castnum rate arg_form silentcast_dir doc_dir working_dir tmp pngs gif webm mp4 k e

ffcoms_running=`pgrep -f ffcom | wc -l`
if (($ffcoms_running > 1))
then
	echo "You are already doing a recording of a recording. Further nesting of silentcasts is not supported." \
	| yad --text-info --wrap --on-top --center --window-icon="$doc_dir/record.png" --title="Error" --text="<b>SILENTCAST ? </b>"
	exit -1
else
	let castnum=$ffcoms_running+1
fi

#defaults
k=""          # -k to keep pngs, "" to delete pngs if they were generated
e=""          # -e to use existing pngs, -g to generate pngs, "" to ignore pngs if webm or mp4
anims_from="temp.mkv"
pngs=FALSE
gif=TRUE
webm=FALSE
mp4=FALSE
fps=8
area_choice="Fullscreen"
area="f"
doc_dir=/usr/share/doc/silentcast
if ! [ -f $doc_dir/README.md ]
then 
	doc_dir="$( cd "$(dirname "$0")" ; pwd -P )" # current directory
fi

working_dir=~ # home directory

if df /tmp | grep -q tmpfs && touch /tmp/foo 2>/dev/null
then
        rm -f /tmp/foo
	tmp=/tmp                    # if /tmp is a writable RAM	disk, offer it
else
	if touch /dev/shm/foo 2>/dev/null
	then
		rm -f /dev/shm/foo
		tmp=/dev/shm        # if /dev/shm (assumed to be a ram disk) is writable, offer it
	else
		tmp="Didn't find a RAM disk"
	fi
fi

arg_form=`yad --form --on-top --center --columns=2\
	--title="Silentcast v$v" \
	--window-icon="$doc_dir/record$castnum".png \
	--text='<tt>\
  <span background="white">                                                            </span>\n\
  <span background="white">  For a demo, guide, and list of tips, click\
\ <a href="https://github.com/colinkeenan/silentcast/#silentcast">web README.md</a>  </span>\n\
  <span background="white">  or install a web-browser addon for markdown and click     </span>\n\
  <span background="white">  <a href="file://'"$doc_dir"'/README.md">local README.md</a>        \
                                   </span>\n\
  <span background="white">                                                            </span>\n\
  <span background="white">  If creating a webm or mp4, you may want to edit first;    </span>\n\
  <span background="white">  so, choose "Videos made from: ew-???.png" and delete      </span>\n\
  <span background="white">  unnecessary images.                                       </span>\n\
  <span background="white">                                                            </span>\n\
  \n\
    silentcast or silencast/silentcast will be created in the \n\
    Working Directory specified below to hold the videos. \n\
    \n\
                 <b>Choose or Enter a Directory  Final Outputs</b></tt>'\
  	--separator="," \
	--field="Working Directory":CBE \
	--field="Area to be recorded":CB \
	--field="Frames per second" \
	--field="Videos made from:":CB \
	--field="anim.gif":CHK \
	--field="ew-???.png images":CHK \
	--field="anim.webm":CHK \
	--field="anim.mp4":CHK \
	"$HOME"!"$tmp"!"other" \
	"Fullscreen"!"Transparent Window Interior"!"Interior of a Window"!"Entirety of a Window" 8 \
	"temp.mkv"!'ew-???.png' TRUE FALSE FALSE FALSE`
(($? != 0)) && exit 1 #Cancel was clicked

working_dir="$(awk -F, '{print $1}' <<<"$arg_form")"         
if ! [ -d "$working_dir" ]
then
	echo "$working_dir is not an existing Directory, so the Silentcast directory can't be created there" \
	| yad --text-info --wrap --on-top --center --window-icon="$doc_dir/record.png" --title="Error" --text="<b>SILENTCAST ? </b>"
	exit -1
fi

area_choice="$(awk -F, '{print $2}' <<<"$arg_form")" # getting 2nd, 3rd,... fields this way only works when --separator=","
fps="$(awk -F, '{print $3}' <<<"$arg_form")"
anims_from="$(awk -F, '{print $4}' <<<"$arg_form")"
gif="$(awk -F, '{print $5}' <<<"$arg_form")"
pngs="$(awk -F, '{print $6}' <<<"$arg_form")"
webm="$(awk -F, '{print $7}' <<<"$arg_form")"
mp4="$(awk -F, '{print $8}' <<<"$arg_form")"

area=${area_choice,} # lower case first letter
area=${area:0:1}     # area is now one of f t i e


if (($castnum == 2))
then 
	mkdir -p $working_dir/silentcast/silentcast
	silentcast_dir=$working_dir/silentcast/silentcast
else
	mkdir -p $working_dir/silentcast 
	silentcast_dir=$working_dir/silentcast
	castnum=1
fi

cd $silentcast_dir
find -maxdepth 1 -regex '\.\/ew-[0-9][0-9][0-9]\.png' -delete
find -maxdepth 1 -name 'anim.gif' -delete
find -maxdepth 1 -name 'anim.webm' -delete
find -maxdepth 1 -name 'anim.mp4' -delete
cd -

source genffcom "-a"$area "-r"$fps "-d"$silentcast_dir $castnum 
(($? != 0)) && exit 1 #Cancel was clicked

bash $silentcast_dir/ffcom
(($? != 0)) && exit 1 #Cancel was clicked

if [ "$pngs" = TRUE ] 
then
	source temptoanim -s $castnum -r $fps -o png -d $working_dir 
	(($? != 0)) && exit 1 #Cancel was clicked
	k="-k" 
	e="-e"
fi

[ "$anims_from" = "ew-???.png" ] && [ "$e" = "" ] && e='-g'

if [ "$gif" = TRUE ]
then
	[ "$pngs" = TRUE ] && wmctrl -c "silentcast"
	[ "$webm" = TRUE ] || [ "$mp4" = TRUE ] && [ "$anims_from" = "ew-???.png" ] && k="-k"

	source temptoanim -s $castnum -r $fps $k $e -o gif -d $working_dir 
	(($? != 0)) && exit 1 #Cancel was clicked

	[ "$anims_from" = "ew-???.png" ] && [ "$k" = "-k" ] && e="-e"
	[ "$pngs" = FALSE ] && k=""
fi

if [ "$webm" = TRUE ] 
then
	[ "$pngs" = TRUE ] || [ "$gif" = TRUE ] && wmctrl -c "silentcast"
	[ "$mp4" = TRUE ] && [ "$anims_from" = "ew-???.png" ] && k="-k"

	source temptoanim -s $castnum -r $fps $k $e -o webm -d $working_dir 
	(($? != 0)) && exit 1 #Cancel was clicked

	[ "$anims_from" = "ew-???.png" ] && [ "$k" = "-k" ] && e="-e"
	[ "$pngs" = FALSE ] && k=""
	[ "$mp4" = TRUE ] && wmctrl -c "silentcast"
fi

[ "$mp4" = TRUE ] && source temptoanim -s $castnum -r $fps $k $e -o mp4 -d $working_dir
(($? != 0)) && exit 1 #Cancel was clicked

exit 0
# End of file: silentcast
