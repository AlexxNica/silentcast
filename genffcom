#!/bin/bash

# Usage info
show_help() {
cat << EOF
genffcom generates a bash script in the current directory
called ffcom containing an ffmpeg command that will record
a silent mkv video at a default rate of 8 frames per second.
Execute the generated script with 
\$ bash ffcom 
in a terminal, and exit by typing q in the terminal it's 
running in. 
   
Usage: genffcom [-hfr rate#] {silentcast#}

    -h          display this help and exit
    -f          set recording area to full screen
                (default is active window excluding
		window decorations)
    -r rate#    set frames per second to rate#
                (default is 8 frames per second)
    silentcast# is a single digit indicating how many
                instances of silentcast are running.
		silentcast limits it to 1 or 2, but
		can be set to anything or left blank
		if genffcom is called outside of silentcast

genffcom is normally called from silentcast, but
   can be called directly or from another script.
EOF
}

unset x y w h fullscreen fps size
#defaults
fullscreen=false
fps=8

OPTIND=1
while getopts ":hfr:" opt
do 
	case $opt in
		h)
			show_help
			exit 0
			;;
		f)
			w=$(xrandr --current | grep '* ' | uniq | awk '{print $1}' |  cut -d 'x' -f1)
			h=$(xrandr --current | grep '* ' | uniq | awk '{print $1}' |  cut -d 'x' -f2)
			fullscreen=true
			;;
		r)
			echo $OPTARG # I don't know why I have to echo $OPTARG to get it assigned, but I do
			fps=$OPTARG 
			;;
		\?) 
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	       	:)
		       	echo "Option -$OPTARG requires an argument." >&2
		       	exit 1
		       	;;
       	esac
done
shift "$((OPTIND-1))" # get rid of everything just processed leaving what's left as $1

guake -t
if ! $fullscreen
then
	size=`zenity --list --title="[3] Set Recording Area [3]" --text="\
SILENTCAST "$1": Choose one of the window sizes below and click OK;\n\
then, click on a window that is not maximized.\n\
	\n\
There will be 2 more dialogue popups before recording begins."\
	       	--column="Window Size for recording" \
		560x315 \
		640x360 \
		853x480 \
		1280x720` 

	case $size in
		560x315)
			wmctrl -e 1,0,0,560,315 -r :SELECT:
			;;
		640x360)
			wmctrl -e 1,0,0,640,360 -r :SELECT:
			;;
		853x480)
			wmctrl -e 1,0,0,853,480 -r :SELECT:
			;;
		1280x720)
			wmctrl -e 1,0,0,1280,720 -r :SELECT:
			;;
	esac

	zenity --info --title="[2] Further Set Recording Area [2]" --text="\
SILENTCAST "$1": Move window to area to be recorded, and resize manually if desired.\n\
Click OK when ready to generate ffcom - i.e. when you've got the next active window sized\n\
and positioned correctly. \n\
\n\
There will be one more dialogue popup before recording begins."
        sleep 0.2 # Just making sure the dialogue window isn't in the way
        eval $(xwininfo -id $(xdotool getactivewindow) |
          sed -n -e "s/^ \+Absolute upper-left X: \+\([0-9]\+\).*/x=\1/p" \
                 -e "s/^ \+Absolute upper-left Y: \+\([0-9]\+\).*/y=\1/p" \
                 -e "s/^ \+Width: \+\([0-9]\+\).*/w=\1/p" \
                 -e "s/^ \+Height: \+\([0-9]\+\).*/h=\1/p" )
fi
echo '#!/bin/bash
# Output from genffcom for screencast#='$1'
zenity --info --title="[1] Get Ready [1]" --text="\
SILENTCAST '$1': Click OK when ready to start recording.\n\
For example, if you wanted to record what is under the window,\n\
close it now.\n\
\n\
Toggle Guake and press q to stop recording."
ffmpeg -f x11grab -s '$w'x'$h' -r '$fps' -i :0.0+'$x','$y' -c:v ffvhuff -an -y temp.mkv' > ffcom

# End of file
