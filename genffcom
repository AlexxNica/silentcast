#!/bin/bash

# Usage info
show_help() {
cat << EOF
genffcom generates a bash script in the current directory
called ffcom containing an ffmpeg command that will record
a silent mkv video at a default rate of 8 frames per second.
Execute the generated script with 
\$ bash ffcom 
in a terminal, and exit by clicking the stop icon in the
notification area. Ignore instructions from ffmpeg about
stopping it with q - it won't work. If you don't have a
notification area, you can still stop it with ctrl-c in
the terminal where it is running.
   
Usage: genffcom [-hfr rate#] {silentcast#}

    -h          display this help and exit
    -f          set recording area to fullscreen 
                (default is active window excluding
		window decorations)
    -r rate#    set frames per second to rate#
                (default is 8 frames per second)
    silentcast# is a single digit indicating how many
                instances of silentcast are running.
		silentcast limits it to 1 or 2, but
		can be set to anything or left blank
		if genffcom is called outside of silentcast

genffcom is normally called from silentcast, but
   can be called directly or from another script.
EOF
}

unset x y w h fullscreen fps size
#defaults
fullscreen=false
fps=8

OPTIND=1
while getopts ":hfr:" opt
do 
	case $opt in
		h)
			show_help
			exit 0
			;;
		f)
			w=$(xrandr --current | grep '* ' | uniq | awk '{print $1}' |  cut -d 'x' -f1)
			h=$(xrandr --current | grep '* ' | uniq | awk '{print $1}' |  cut -d 'x' -f2)
			fullscreen=true
			;;
		r)
			echo $OPTARG # I don't know why I have to echo $OPTARG to get it assigned, but I do
			fps=$OPTARG 
			;;
		\?) 
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	       	:)
		       	echo "Option -$OPTARG requires an argument." >&2
		       	exit 1
		       	;;
       	esac
done
shift "$((OPTIND-1))" # get rid of everything just processed leaving silentcast# as $1

if [ "$fullscreen" = false ]
then
	size=`yad --list --on-top --height="340" --title="Set Recording Area" --window-icon="media-record" --separator='-' --text="\
<b>SILENTCAST $1                </b><span font='24' color='green'>3</span>\n\
Choose one of the window sizes below and click OK; then, click on a window <span color='red'>that is not maximized.</span>\n\
	\n\
After auto-resizing (or not), the next dialogue will give you another chance to make manual adjustments."\
	       	--column="Window Size for recording" \
		No-auto-sizing \
		560x315 \
		640x360 \
		853x480 \
		1280x720` 
[ "$?" -ne "0" ] && exit 1 #Cancel was clicked

	case $size in
		560x315-)
			wmctrl -e 1,0,0,560,315 -r :SELECT:
			;;
		640x360-)
			wmctrl -e 1,0,0,640,360 -r :SELECT:
			;;
		853x480-)
			wmctrl -e 1,0,0,853,480 -r :SELECT:
			;;
		1280x720-)
			wmctrl -e 1,0,0,1280,720 -r :SELECT:
			;;
	esac

	printf "Move the next active window to the area to be recorded, and resize manually if desired.
       	
Click OK when you've got the next active window sized and positioned correctly. 
       	
The next dialogue will give you a chance to close the next active window or make other adjustments before recording begins." \
| yad --text-info --on-top --width=440 --height=280 --wrap --title="Further Set \
Recording Area" --window-icon="media-record" --text="<b>SILENTCAST $1                </b><span font='24' color='green'>2</span>"
[ "$?" -ne "0" ] && exit 1 #Cancel was clicked

        sleep 0.2 # Just making sure the dialogue window isn't in the way
        eval $(xwininfo -id $(xdotool getactivewindow) |
          sed -n -e "s/^ \+Absolute upper-left X: \+\([0-9]\+\).*/x=\1/p" \
                 -e "s/^ \+Absolute upper-left Y: \+\([0-9]\+\).*/y=\1/p" \
                 -e "s/^ \+Width: \+\([0-9]\+\).*/w=\1/p" \
                 -e "s/^ \+Height: \+\([0-9]\+\).*/h=\1/p" )
fi
echo '#!/bin/bash
# Output from genffcom for screencast#='$1'

printf "Click OK when ready to start recording.

To Stop Recording: 
Click the stop icon in the Notification Area" \
| yad ---text-info --on-top --width=440 --height=280 --wrap --title="Get Ready" --window-icon="media-record" --text="\
<b>SILENTCAST '$1'                </b><span font='"'"'24'"'"' color='"'"'green'"'"'>1</span>"
[ "$?" -ne "0" ] && exit 1 #Cancel was clicked

ffmpeg -f x11grab -s '$w'x'$h' -r '$fps' -i :0.0+'$x','$y' -c:v ffvhuff -an -y temp.mkv & ffmpegPID=$!
yad --notification --image="stop" --text="'$1'"
kill $ffmpegPID' > ffcom

# End of file
