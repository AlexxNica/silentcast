#!/bin/bash

# Usage info
show_help() {
cat << EOF
temptoanim converts temp.mkv to anim.gif

Usage: temptoanim [-h -s# -r# -k -p -d working_dir]

    -h          display this help and exit

    -s #        i.e. Silentcast # - the number of instances of Silentcast
                that are running

	# must be 0, 1, or 2 (default is 0 meaning temptoanim was started
	outside of the Silentcast application)

	0: tries to convert ./temp.mkv (if working_dir is also 
	   specified, it will be ignored)
	1: tries to convert working_dir/silentcast/temp.mkv
	2: tries to convert working_dir/silentcast/silentcast/temp.mkv

    -r #        i.e. rate # or fps (default is 8)
	        # is a natural number (2 to 120) that should match the 
		frames per second of temp.mkv. 
		temptoanim doesn't verify the actual fps in temp.mkv. 
	
    -k          keep all the png images that are created as an intermediate
                step towards creating anim.gif

    -p          png images only (implies k) anim.gif will not be created

    -d working_dir  
                defaults to the current directory and is where temptoanim 
                will expect to find the silentcast or silentcast/silentcast 
		directory

There are some dialogues that come up, and it's important to read
and understand them. View /usr/share/doc/silentcast/README.md with
a markdown viewer and get an animated gif demo made with silentcast,
as well as a step by step guide and a list of tips.
EOF
}

#defaults

castnum=""
fps=8
cut=0
total_cut=0
group=0
count=0
rm_png=true
make_anim=true

OPTIND=1
while getopts ":hs:r:kpd:" opt
do 
	echo $OPTARG # I don't know why I have to echo $OPTARG to get it assigned, but I do
	case $opt in
		h)
			show_help
			exit 0
			;;
		s)
			case $OPTARG in
				1)
					castnum=1
					;;
				2)
					castnum=2
					;;
				[!012])
					echo "Invalid Silentcast#: -s$OPTARG  ('temptoanim -h' for help)" >&2
					exit 1
					;;
			esac
			;;
		r)
			fps=$OPTARG 
			if ! [[ "$fps" =~ ^[0-9]+$ ]] && (($fps<2 || $fps>120)) 
			then
				show_help
				exit 0
			fi
			;;
		k)
			rm_png=false
			;;
		p)
			rm_png=false
			make_anim=false
			;;
		d)
			working_dir="$OPTARG"
			;;
		\?) 
			echo "Invalid option: -$OPTARG  ('genffcom -h' for help)" >&2
			exit 1
			;;
	       	:)
		       	echo "Option -$OPTARG requires an argument." >&2
		       	exit 1
		       	;;
       	esac
done
shift "$((OPTIND-1))" # get rid of everything just processed leaving anything left as $1
if [ "$1" != "" ] 
then 
	show_help # shouldn't be anything else so show help if there is
	exit 1
fi

if ! [ -d $working_dir/ ]
then
	echo "$working_dir is not an existing directory, so the silentcast directory can't be there" \
	| yad --text-info --wrap --on-top --center --window-icon="$doc_dir/record.png" --title="Error" --text="<b>SILENTCAST ? </b>"
	exit -1
fi

[ $castnum = 1 ] && cd $working_dir/silentcast
[ $castnum = 2 ] && cd $working_dir/silentcast/silentcast

if ! [ -f temp.mkv ]
then
	echo "temp.mkv not found, so can't convert it to anim.gif" \
	| yad --text-info --wrap --on-top --center --window-icon="$doc_dir/record$castnum".png --title="Error" --text="<b>SILENTCAST $castnum </b>"
	exit -1
fi

if [ "$XDG_CURRENT_DESKTOP" = "GNOME"  ] 
then
	nautilus ./ & file_browserPID=$! # for some reason xdg-open doesn't work inside this script in Gnome
else
	xdg-open ./ 
fi

find -maxdepth 1 -name 'anim.gif' -delete
find -maxdepth 1 -regex '\.\/ew-[0-9][0-9][0-9]\.png' -delete

ffmpeg -i temp.mkv -r $fps ew-%03d.png \
	| yad --progress --on-top --center --window-icon="$doc_dir/record$castnum".png --text="<b>SILENTCAST $castnum </b> \n\
Creating images from temp.mkv" --pulsate --auto-close

xdotool key 'F5' # in testing, Dolphin used by KDE needs this sometimes

[ $make_anim = true ] && while ! [ -f anim.gif ]
do
    cut=`yad --entry --on-top --center --window-icon="$doc_dir/record$castnum".png \
        --title="Prepare images before converting to Anim.gif" \
        --text="<b>SILENTCAST $castnum </b> \n\
Manually delete or otherwise manipulate the images and click OK,\n\
Or \n\
Enter any positive integer less than the total number of images. It works like this:\n\
0 do nothing\n\
1 delete every other\n\
2 delete 2 out of every 3\n\
3 delete 3 out of every 4 ..."\
        --entry-text="0"`
    (($? != 0)) && exit 1 #Cancel was clicked

    let group=$cut+1
    let total_cut=$total_cut+$cut
    if (($group > 1))
    then
    	count=0
    	for f in ew-[0-9][0-9][0-9].png
    	do
    		    let count++
		    if (($count % $group != 1))
    		    then
    			    rm $f
    		    fi
    	done
    fi
    convert -adjoin -delay "$((total_cut + 1))"x"$fps" -layers optimize ew-[0-9][0-9][0-9].png anim.gif | \
	    yad --progress --on-top --center --title="convert" --window-icon="$doc_dir/record$castnum".png --text="<b>SILENTCAST $castnum </b> \n\
	    Replacing images with anim.gif... (clicking Close below doesn't stop convert, so don't)" --pulsate --auto-close
    if ! [ -f anim.gif ]
    then 
	echo "Too many images for the available memory - convert crashed. Try closing other applications, creating a swap file, or removing unecessary images." |\
    	  yad --text-info --wrap --on-top --center --window-icon="$doc_dir/record$castnum".png --title="Error" --text="<b>SILENTCAST $castnum </b>"
	(($? != 0)) && exit 1 #Cancel was clicked
    else
	    [ rm_png = true ] && rm ew-[0-9][0-9][0-9].png
    fi
    xdotool key 'F5' # in testing, Dolphin used by KDE needs this sometimes
done

if [ $mp4 = FALSE ] && [ $webm = FALSE ] 
then 
	exit 0
else
	pkill $file_browserPID
	wmctrl -c "silentcast"
	cd -
fi

# End of file
